// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pipeline_event.proto

package protocol

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MetricEvent_MetricValueType int32

const (
	MetricEvent_SINGLE MetricEvent_MetricValueType = 0
	MetricEvent_MULTI  MetricEvent_MetricValueType = 1
)

var MetricEvent_MetricValueType_name = map[int32]string{
	0: "SINGLE",
	1: "MULTI",
}

var MetricEvent_MetricValueType_value = map[string]int32{
	"SINGLE": 0,
	"MULTI":  1,
}

func (x MetricEvent_MetricValueType) Enum() *MetricEvent_MetricValueType {
	p := new(MetricEvent_MetricValueType)
	*p = x
	return p
}

func (x MetricEvent_MetricValueType) String() string {
	return proto.EnumName(MetricEvent_MetricValueType_name, int32(x))
}

func (x *MetricEvent_MetricValueType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MetricEvent_MetricValueType_value, data, "MetricEvent_MetricValueType")
	if err != nil {
		return err
	}
	*x = MetricEvent_MetricValueType(value)
	return nil
}

func (MetricEvent_MetricValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c58a16dc71f415c6, []int{1, 0}
}

type SpanEvent_SpanKind int32

const (
	SpanEvent_UNSPECIFIED SpanEvent_SpanKind = 0
	SpanEvent_INTERVAL    SpanEvent_SpanKind = 1
	SpanEvent_SERVER      SpanEvent_SpanKind = 2
	SpanEvent_CLIENT      SpanEvent_SpanKind = 3
	SpanEvent_PRODUCER    SpanEvent_SpanKind = 4
	SpanEvent_CONSUMER    SpanEvent_SpanKind = 5
)

var SpanEvent_SpanKind_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "INTERVAL",
	2: "SERVER",
	3: "CLIENT",
	4: "PRODUCER",
	5: "CONSUMER",
}

var SpanEvent_SpanKind_value = map[string]int32{
	"UNSPECIFIED": 0,
	"INTERVAL":    1,
	"SERVER":      2,
	"CLIENT":      3,
	"PRODUCER":    4,
	"CONSUMER":    5,
}

func (x SpanEvent_SpanKind) Enum() *SpanEvent_SpanKind {
	p := new(SpanEvent_SpanKind)
	*p = x
	return p
}

func (x SpanEvent_SpanKind) String() string {
	return proto.EnumName(SpanEvent_SpanKind_name, int32(x))
}

func (x *SpanEvent_SpanKind) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SpanEvent_SpanKind_value, data, "SpanEvent_SpanKind")
	if err != nil {
		return err
	}
	*x = SpanEvent_SpanKind(value)
	return nil
}

func (SpanEvent_SpanKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c58a16dc71f415c6, []int{2, 0}
}

type SpanEvent_StatusCode int32

const (
	SpanEvent_Unset SpanEvent_StatusCode = 0
	SpanEvent_Ok    SpanEvent_StatusCode = 1
	SpanEvent_Error SpanEvent_StatusCode = 2
)

var SpanEvent_StatusCode_name = map[int32]string{
	0: "Unset",
	1: "Ok",
	2: "Error",
}

var SpanEvent_StatusCode_value = map[string]int32{
	"Unset": 0,
	"Ok":    1,
	"Error": 2,
}

func (x SpanEvent_StatusCode) Enum() *SpanEvent_StatusCode {
	p := new(SpanEvent_StatusCode)
	*p = x
	return p
}

func (x SpanEvent_StatusCode) String() string {
	return proto.EnumName(SpanEvent_StatusCode_name, int32(x))
}

func (x *SpanEvent_StatusCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SpanEvent_StatusCode_value, data, "SpanEvent_StatusCode")
	if err != nil {
		return err
	}
	*x = SpanEvent_StatusCode(value)
	return nil
}

func (SpanEvent_StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c58a16dc71f415c6, []int{2, 1}
}

type PipelineEventGroup_EventType int32

const (
	PipelineEventGroup_LOG    PipelineEventGroup_EventType = 0
	PipelineEventGroup_METRIC PipelineEventGroup_EventType = 1
	PipelineEventGroup_SPAN   PipelineEventGroup_EventType = 2
)

var PipelineEventGroup_EventType_name = map[int32]string{
	0: "LOG",
	1: "METRIC",
	2: "SPAN",
}

var PipelineEventGroup_EventType_value = map[string]int32{
	"LOG":    0,
	"METRIC": 1,
	"SPAN":   2,
}

func (x PipelineEventGroup_EventType) Enum() *PipelineEventGroup_EventType {
	p := new(PipelineEventGroup_EventType)
	*p = x
	return p
}

func (x PipelineEventGroup_EventType) String() string {
	return proto.EnumName(PipelineEventGroup_EventType_name, int32(x))
}

func (x *PipelineEventGroup_EventType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PipelineEventGroup_EventType_value, data, "PipelineEventGroup_EventType")
	if err != nil {
		return err
	}
	*x = PipelineEventGroup_EventType(value)
	return nil
}

func (PipelineEventGroup_EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c58a16dc71f415c6, []int{3, 0}
}

type LogEvent struct {
	Time     uint32              `protobuf:"varint,1,req,name=Time" json:"Time"`
	TimeNs   uint32              `protobuf:"fixed32,2,opt,name=Time_ns,json=TimeNs" json:"Time_ns"`
	Contents []*LogEvent_Content `protobuf:"bytes,3,rep,name=Contents" json:"Contents,omitempty"`
	Values   []string            `protobuf:"bytes,4,rep,name=Values" json:"Values,omitempty"`
	Offset   uint64              `protobuf:"varint,5,opt,name=Offset" json:"Offset"`
	Level    string              `protobuf:"bytes,6,opt,name=Level" json:"Level"`
}

func (m *LogEvent) Reset()         { *m = LogEvent{} }
func (m *LogEvent) String() string { return proto.CompactTextString(m) }
func (*LogEvent) ProtoMessage()    {}
func (*LogEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c58a16dc71f415c6, []int{0}
}
func (m *LogEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEvent.Merge(m, src)
}
func (m *LogEvent) XXX_Size() int {
	return m.Size()
}
func (m *LogEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEvent.DiscardUnknown(m)
}

var xxx_messageInfo_LogEvent proto.InternalMessageInfo

func (m *LogEvent) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *LogEvent) GetTimeNs() uint32 {
	if m != nil {
		return m.TimeNs
	}
	return 0
}

func (m *LogEvent) GetContents() []*LogEvent_Content {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *LogEvent) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *LogEvent) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *LogEvent) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

type LogEvent_Content struct {
	Key   string `protobuf:"bytes,1,req,name=Key" json:"Key"`
	Value []byte `protobuf:"bytes,2,req,name=Value" json:"Value"`
}

func (m *LogEvent_Content) Reset()         { *m = LogEvent_Content{} }
func (m *LogEvent_Content) String() string { return proto.CompactTextString(m) }
func (*LogEvent_Content) ProtoMessage()    {}
func (*LogEvent_Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_c58a16dc71f415c6, []int{0, 0}
}
func (m *LogEvent_Content) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogEvent_Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogEvent_Content.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogEvent_Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEvent_Content.Merge(m, src)
}
func (m *LogEvent_Content) XXX_Size() int {
	return m.Size()
}
func (m *LogEvent_Content) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEvent_Content.DiscardUnknown(m)
}

var xxx_messageInfo_LogEvent_Content proto.InternalMessageInfo

func (m *LogEvent_Content) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LogEvent_Content) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type MetricEvent struct {
	Time        uint32                      `protobuf:"varint,1,req,name=Time" json:"Time"`
	TimeNs      uint32                      `protobuf:"fixed32,2,opt,name=Time_ns,json=TimeNs" json:"Time_ns"`
	Name        string                      `protobuf:"bytes,3,req,name=Name" json:"Name"`
	Type        MetricEvent_MetricValueType `protobuf:"varint,4,req,name=Type,enum=sls_logs.MetricEvent_MetricValueType" json:"Type"`
	SingleValue float64                     `protobuf:"fixed64,5,opt,name=SingleValue" json:"SingleValue"`
	MultiValue  map[string]float64          `protobuf:"bytes,6,rep,name=MultiValue" json:"MultiValue,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Tags        map[string]string           `protobuf:"bytes,7,rep,name=Tags" json:"Tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MetricEvent) Reset()         { *m = MetricEvent{} }
func (m *MetricEvent) String() string { return proto.CompactTextString(m) }
func (*MetricEvent) ProtoMessage()    {}
func (*MetricEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c58a16dc71f415c6, []int{1}
}
func (m *MetricEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetricEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricEvent.Merge(m, src)
}
func (m *MetricEvent) XXX_Size() int {
	return m.Size()
}
func (m *MetricEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MetricEvent proto.InternalMessageInfo

func (m *MetricEvent) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *MetricEvent) GetTimeNs() uint32 {
	if m != nil {
		return m.TimeNs
	}
	return 0
}

func (m *MetricEvent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricEvent) GetType() MetricEvent_MetricValueType {
	if m != nil {
		return m.Type
	}
	return MetricEvent_SINGLE
}

func (m *MetricEvent) GetSingleValue() float64 {
	if m != nil {
		return m.SingleValue
	}
	return 0
}

func (m *MetricEvent) GetMultiValue() map[string]float64 {
	if m != nil {
		return m.MultiValue
	}
	return nil
}

func (m *MetricEvent) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type SpanEvent struct {
	Time         uint32                  `protobuf:"varint,1,req,name=Time" json:"Time"`
	TimeNs       uint32                  `protobuf:"fixed32,2,opt,name=Time_ns,json=TimeNs" json:"Time_ns"`
	TraceID      string                  `protobuf:"bytes,3,req,name=TraceID" json:"TraceID"`
	SpanID       string                  `protobuf:"bytes,4,req,name=SpanID" json:"SpanID"`
	TraceState   string                  `protobuf:"bytes,5,opt,name=TraceState" json:"TraceState"`
	ParentSpanID string                  `protobuf:"bytes,6,opt,name=ParentSpanID" json:"ParentSpanID"`
	Name         string                  `protobuf:"bytes,7,opt,name=Name" json:"Name"`
	Kind         SpanEvent_SpanKind      `protobuf:"varint,8,opt,name=Kind,enum=sls_logs.SpanEvent_SpanKind" json:"Kind"`
	StartTimeNs  uint64                  `protobuf:"varint,9,req,name=StartTimeNs" json:"StartTimeNs"`
	EndTimeNs    uint64                  `protobuf:"varint,10,req,name=EndTimeNs" json:"EndTimeNs"`
	Tags         map[string]string       `protobuf:"bytes,11,rep,name=Tags" json:"Tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Events       []*SpanEvent_InnerEvent `protobuf:"bytes,12,rep,name=Events" json:"Events,omitempty"`
	Links        []*SpanEvent_SpanLink   `protobuf:"bytes,13,rep,name=Links" json:"Links,omitempty"`
	Status       SpanEvent_StatusCode    `protobuf:"varint,14,opt,name=Status,enum=sls_logs.SpanEvent_StatusCode" json:"Status"`
	ScopeTags    map[string]string       `protobuf:"bytes,15,rep,name=ScopeTags" json:"ScopeTags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SpanEvent) Reset()         { *m = SpanEvent{} }
func (m *SpanEvent) String() string { return proto.CompactTextString(m) }
func (*SpanEvent) ProtoMessage()    {}
func (*SpanEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c58a16dc71f415c6, []int{2}
}
func (m *SpanEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpanEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpanEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpanEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanEvent.Merge(m, src)
}
func (m *SpanEvent) XXX_Size() int {
	return m.Size()
}
func (m *SpanEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SpanEvent proto.InternalMessageInfo

func (m *SpanEvent) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *SpanEvent) GetTimeNs() uint32 {
	if m != nil {
		return m.TimeNs
	}
	return 0
}

func (m *SpanEvent) GetTraceID() string {
	if m != nil {
		return m.TraceID
	}
	return ""
}

func (m *SpanEvent) GetSpanID() string {
	if m != nil {
		return m.SpanID
	}
	return ""
}

func (m *SpanEvent) GetTraceState() string {
	if m != nil {
		return m.TraceState
	}
	return ""
}

func (m *SpanEvent) GetParentSpanID() string {
	if m != nil {
		return m.ParentSpanID
	}
	return ""
}

func (m *SpanEvent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SpanEvent) GetKind() SpanEvent_SpanKind {
	if m != nil {
		return m.Kind
	}
	return SpanEvent_UNSPECIFIED
}

func (m *SpanEvent) GetStartTimeNs() uint64 {
	if m != nil {
		return m.StartTimeNs
	}
	return 0
}

func (m *SpanEvent) GetEndTimeNs() uint64 {
	if m != nil {
		return m.EndTimeNs
	}
	return 0
}

func (m *SpanEvent) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *SpanEvent) GetEvents() []*SpanEvent_InnerEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *SpanEvent) GetLinks() []*SpanEvent_SpanLink {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *SpanEvent) GetStatus() SpanEvent_StatusCode {
	if m != nil {
		return m.Status
	}
	return SpanEvent_Unset
}

func (m *SpanEvent) GetScopeTags() map[string]string {
	if m != nil {
		return m.ScopeTags
	}
	return nil
}

type SpanEvent_InnerEvent struct {
	TimestampNs uint64            `protobuf:"varint,1,req,name=TimestampNs" json:"TimestampNs"`
	Name        string            `protobuf:"bytes,2,req,name=Name" json:"Name"`
	Tags        map[string]string `protobuf:"bytes,3,rep,name=Tags" json:"Tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SpanEvent_InnerEvent) Reset()         { *m = SpanEvent_InnerEvent{} }
func (m *SpanEvent_InnerEvent) String() string { return proto.CompactTextString(m) }
func (*SpanEvent_InnerEvent) ProtoMessage()    {}
func (*SpanEvent_InnerEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c58a16dc71f415c6, []int{2, 1}
}
func (m *SpanEvent_InnerEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpanEvent_InnerEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpanEvent_InnerEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpanEvent_InnerEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanEvent_InnerEvent.Merge(m, src)
}
func (m *SpanEvent_InnerEvent) XXX_Size() int {
	return m.Size()
}
func (m *SpanEvent_InnerEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanEvent_InnerEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SpanEvent_InnerEvent proto.InternalMessageInfo

func (m *SpanEvent_InnerEvent) GetTimestampNs() uint64 {
	if m != nil {
		return m.TimestampNs
	}
	return 0
}

func (m *SpanEvent_InnerEvent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SpanEvent_InnerEvent) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type SpanEvent_SpanLink struct {
	TraceID    string            `protobuf:"bytes,1,req,name=TraceID" json:"TraceID"`
	SpanID     string            `protobuf:"bytes,2,req,name=SpanID" json:"SpanID"`
	TraceState string            `protobuf:"bytes,3,opt,name=TraceState" json:"TraceState"`
	Tags       map[string]string `protobuf:"bytes,4,rep,name=Tags" json:"Tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SpanEvent_SpanLink) Reset()         { *m = SpanEvent_SpanLink{} }
func (m *SpanEvent_SpanLink) String() string { return proto.CompactTextString(m) }
func (*SpanEvent_SpanLink) ProtoMessage()    {}
func (*SpanEvent_SpanLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_c58a16dc71f415c6, []int{2, 2}
}
func (m *SpanEvent_SpanLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpanEvent_SpanLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpanEvent_SpanLink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpanEvent_SpanLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanEvent_SpanLink.Merge(m, src)
}
func (m *SpanEvent_SpanLink) XXX_Size() int {
	return m.Size()
}
func (m *SpanEvent_SpanLink) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanEvent_SpanLink.DiscardUnknown(m)
}

var xxx_messageInfo_SpanEvent_SpanLink proto.InternalMessageInfo

func (m *SpanEvent_SpanLink) GetTraceID() string {
	if m != nil {
		return m.TraceID
	}
	return ""
}

func (m *SpanEvent_SpanLink) GetSpanID() string {
	if m != nil {
		return m.SpanID
	}
	return ""
}

func (m *SpanEvent_SpanLink) GetTraceState() string {
	if m != nil {
		return m.TraceState
	}
	return ""
}

func (m *SpanEvent_SpanLink) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type PipelineEventGroup struct {
	Metadata map[string][]byte            `protobuf:"bytes,1,rep,name=Metadata" json:"Metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Tags     map[string][]byte            `protobuf:"bytes,2,rep,name=Tags" json:"Tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Type     PipelineEventGroup_EventType `protobuf:"varint,3,req,name=Type,enum=sls_logs.PipelineEventGroup_EventType" json:"Type"`
	Logs     []*LogEvent                  `protobuf:"bytes,4,rep,name=Logs" json:"Logs,omitempty"`
	Metrics  []*MetricEvent               `protobuf:"bytes,5,rep,name=Metrics" json:"Metrics,omitempty"`
	Spans    []*SpanEvent                 `protobuf:"bytes,6,rep,name=Spans" json:"Spans,omitempty"`
}

func (m *PipelineEventGroup) Reset()         { *m = PipelineEventGroup{} }
func (m *PipelineEventGroup) String() string { return proto.CompactTextString(m) }
func (*PipelineEventGroup) ProtoMessage()    {}
func (*PipelineEventGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_c58a16dc71f415c6, []int{3}
}
func (m *PipelineEventGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PipelineEventGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PipelineEventGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PipelineEventGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineEventGroup.Merge(m, src)
}
func (m *PipelineEventGroup) XXX_Size() int {
	return m.Size()
}
func (m *PipelineEventGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineEventGroup.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineEventGroup proto.InternalMessageInfo

func (m *PipelineEventGroup) GetMetadata() map[string][]byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *PipelineEventGroup) GetTags() map[string][]byte {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *PipelineEventGroup) GetType() PipelineEventGroup_EventType {
	if m != nil {
		return m.Type
	}
	return PipelineEventGroup_LOG
}

func (m *PipelineEventGroup) GetLogs() []*LogEvent {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *PipelineEventGroup) GetMetrics() []*MetricEvent {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *PipelineEventGroup) GetSpans() []*SpanEvent {
	if m != nil {
		return m.Spans
	}
	return nil
}

func init() {
	proto.RegisterEnum("sls_logs.MetricEvent_MetricValueType", MetricEvent_MetricValueType_name, MetricEvent_MetricValueType_value)
	proto.RegisterEnum("sls_logs.SpanEvent_SpanKind", SpanEvent_SpanKind_name, SpanEvent_SpanKind_value)
	proto.RegisterEnum("sls_logs.SpanEvent_StatusCode", SpanEvent_StatusCode_name, SpanEvent_StatusCode_value)
	proto.RegisterEnum("sls_logs.PipelineEventGroup_EventType", PipelineEventGroup_EventType_name, PipelineEventGroup_EventType_value)
	proto.RegisterType((*LogEvent)(nil), "sls_logs.LogEvent")
	proto.RegisterType((*LogEvent_Content)(nil), "sls_logs.LogEvent.Content")
	proto.RegisterType((*MetricEvent)(nil), "sls_logs.MetricEvent")
	proto.RegisterMapType((map[string]float64)(nil), "sls_logs.MetricEvent.MultiValueEntry")
	proto.RegisterMapType((map[string]string)(nil), "sls_logs.MetricEvent.TagsEntry")
	proto.RegisterType((*SpanEvent)(nil), "sls_logs.SpanEvent")
	proto.RegisterMapType((map[string]string)(nil), "sls_logs.SpanEvent.ScopeTagsEntry")
	proto.RegisterMapType((map[string]string)(nil), "sls_logs.SpanEvent.TagsEntry")
	proto.RegisterType((*SpanEvent_InnerEvent)(nil), "sls_logs.SpanEvent.InnerEvent")
	proto.RegisterMapType((map[string]string)(nil), "sls_logs.SpanEvent.InnerEvent.TagsEntry")
	proto.RegisterType((*SpanEvent_SpanLink)(nil), "sls_logs.SpanEvent.SpanLink")
	proto.RegisterMapType((map[string]string)(nil), "sls_logs.SpanEvent.SpanLink.TagsEntry")
	proto.RegisterType((*PipelineEventGroup)(nil), "sls_logs.PipelineEventGroup")
	proto.RegisterMapType((map[string][]byte)(nil), "sls_logs.PipelineEventGroup.MetadataEntry")
	proto.RegisterMapType((map[string][]byte)(nil), "sls_logs.PipelineEventGroup.TagsEntry")
}

func init() { proto.RegisterFile("pipeline_event.proto", fileDescriptor_c58a16dc71f415c6) }

var fileDescriptor_c58a16dc71f415c6 = []byte{
	// 988 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xd6, 0x92, 0xd4, 0x0f, 0x47, 0xb2, 0x4d, 0x6c, 0xdb, 0x60, 0x21, 0x24, 0x0a, 0x21, 0xb4,
	0x01, 0xeb, 0x83, 0x8a, 0xba, 0x80, 0x51, 0x04, 0x29, 0x9a, 0x44, 0x66, 0x5c, 0x22, 0x14, 0x25,
	0x50, 0x92, 0x6f, 0x85, 0x41, 0xd8, 0x1b, 0x43, 0xb0, 0x4c, 0x12, 0x24, 0x6d, 0xc0, 0xef, 0xd0,
	0x43, 0x8f, 0x7d, 0xa4, 0x1c, 0xd3, 0x5b, 0x4f, 0x45, 0x61, 0x3f, 0x40, 0x1e, 0xa1, 0xc5, 0x2e,
	0x97, 0x3f, 0x96, 0x68, 0x37, 0xa8, 0xdd, 0x93, 0x56, 0x33, 0xdf, 0xcc, 0x68, 0xe6, 0xfb, 0x66,
	0x57, 0xf0, 0x79, 0xb8, 0x08, 0xe9, 0x72, 0xe1, 0xd3, 0x43, 0x7a, 0x41, 0xfd, 0x64, 0x10, 0x46,
	0x41, 0x12, 0xe0, 0x56, 0xbc, 0x8c, 0x0f, 0x97, 0xc1, 0x49, 0xdc, 0xff, 0x45, 0x82, 0x96, 0x1d,
	0x9c, 0x98, 0xcc, 0x89, 0x09, 0x28, 0xb3, 0xc5, 0x19, 0x25, 0x48, 0x97, 0x8c, 0x8d, 0xd7, 0xca,
	0xfb, 0x3f, 0x9f, 0xd6, 0x5c, 0x6e, 0xc1, 0x4f, 0xa0, 0xc9, 0x3e, 0x0f, 0xfd, 0x98, 0x48, 0x3a,
	0x32, 0x9a, 0xc2, 0xd9, 0x60, 0x46, 0x27, 0xc6, 0xbb, 0xd0, 0x1a, 0x06, 0x7e, 0x42, 0xfd, 0x24,
	0x26, 0xb2, 0x2e, 0x1b, 0xed, 0x9d, 0xee, 0x20, 0x2b, 0x31, 0xc8, 0xd2, 0x0f, 0x04, 0xc4, 0xcd,
	0xb1, 0xf8, 0x11, 0x34, 0x0e, 0xbc, 0xe5, 0x39, 0x8d, 0x89, 0xa2, 0xcb, 0x86, 0xea, 0x8a, 0x6f,
	0xf8, 0x31, 0x34, 0xc6, 0xef, 0xde, 0xc5, 0x34, 0x21, 0x75, 0x1d, 0x19, 0x4a, 0x56, 0x2d, 0xb5,
	0xe1, 0x2e, 0xd4, 0x6d, 0x7a, 0x41, 0x97, 0xa4, 0xa1, 0x23, 0x43, 0x15, 0xce, 0xd4, 0xd4, 0xfd,
	0x01, 0x9a, 0x22, 0x3b, 0x7e, 0x04, 0xf2, 0x5b, 0x7a, 0xc9, 0x9b, 0xc9, 0x40, 0xcc, 0xc0, 0xc2,
	0x79, 0x19, 0x22, 0xe9, 0x92, 0xd1, 0xc9, 0xc2, 0xb9, 0xa9, 0xff, 0xb7, 0x0c, 0xed, 0x11, 0x4d,
	0xa2, 0xc5, 0xd1, 0x3d, 0x27, 0x42, 0x40, 0x71, 0xbc, 0x33, 0x4a, 0xe4, 0x52, 0x75, 0x6e, 0xc1,
	0x3f, 0x82, 0x32, 0xbb, 0x0c, 0x29, 0x51, 0x74, 0xc9, 0xd8, 0xdc, 0xf9, 0xaa, 0x98, 0x53, 0xa9,
	0xae, 0x38, 0xf3, 0xdf, 0xc4, 0xc0, 0x79, 0xe5, 0xcb, 0x90, 0xe2, 0x67, 0xd0, 0x9e, 0x2e, 0xfc,
	0x93, 0x25, 0x4d, 0xbb, 0x60, 0x13, 0x42, 0x02, 0x50, 0x76, 0x60, 0x13, 0x60, 0x74, 0xbe, 0x4c,
	0x16, 0x29, 0xac, 0xc1, 0x69, 0xb9, 0xad, 0x5c, 0x8e, 0x33, 0xfd, 0x24, 0xba, 0x74, 0x4b, 0x81,
	0xf8, 0x3b, 0x50, 0x66, 0xde, 0x49, 0x4c, 0x9a, 0x3c, 0xc1, 0xd3, 0xea, 0x04, 0x0c, 0x91, 0x86,
	0x72, 0x70, 0xd7, 0x82, 0xad, 0x95, 0x9c, 0x8c, 0x8e, 0x53, 0x4e, 0x47, 0xc1, 0x19, 0x33, 0x30,
	0x3a, 0x2e, 0x04, 0x1d, 0x45, 0x23, 0xa9, 0xe9, 0xb9, 0xf4, 0x3d, 0xea, 0x0e, 0x41, 0xcd, 0xb3,
	0x7f, 0x5a, 0x12, 0x75, 0x2d, 0x49, 0xdf, 0x80, 0xad, 0x95, 0x91, 0x62, 0x80, 0xc6, 0xd4, 0x72,
	0xf6, 0x6d, 0x53, 0xab, 0x61, 0x15, 0xea, 0xa3, 0xb9, 0x3d, 0xb3, 0x34, 0xd4, 0xff, 0x08, 0xa0,
	0x4e, 0x43, 0xcf, 0xbf, 0x27, 0xff, 0x3d, 0x68, 0xce, 0x22, 0xef, 0x88, 0x5a, 0x7b, 0x37, 0x24,
	0x90, 0x19, 0x99, 0xc2, 0x59, 0x15, 0x6b, 0x8f, 0xeb, 0x20, 0x73, 0x0b, 0x1b, 0xfe, 0x12, 0x80,
	0x03, 0xa7, 0x89, 0x97, 0xa4, 0x0c, 0x67, 0x88, 0x92, 0x1d, 0x1b, 0xd0, 0x99, 0x78, 0x11, 0xf5,
	0x13, 0x91, 0xa9, 0xbc, 0x0e, 0x37, 0x3c, 0xb9, 0x1a, 0x9b, 0x25, 0x44, 0xaa, 0xc6, 0x5d, 0x50,
	0xde, 0x2e, 0xfc, 0x63, 0xd2, 0xd2, 0x91, 0xb1, 0xb9, 0xf3, 0xb8, 0x60, 0x37, 0x9f, 0x01, 0x3f,
	0x31, 0x4c, 0x16, 0xc7, 0xce, 0x5c, 0x84, 0x89, 0x17, 0x25, 0x69, 0xbb, 0x44, 0xd5, 0xa5, 0x7c,
	0x4d, 0xcb, 0x0e, 0xdc, 0x07, 0xd5, 0xf4, 0x8f, 0x05, 0x0a, 0x4a, 0xa8, 0xc2, 0x8c, 0xbf, 0x15,
	0x0a, 0x6b, 0x73, 0x85, 0x3d, 0xa9, 0xfa, 0x0d, 0x2b, 0xfa, 0xc2, 0xbb, 0xd0, 0xe0, 0x8e, 0x98,
	0x74, 0x78, 0x50, 0xaf, 0x2a, 0xc8, 0xf2, 0x7d, 0x1a, 0xf1, 0xa3, 0x2b, 0xd0, 0x78, 0x07, 0xea,
	0xf6, 0xc2, 0x3f, 0x8d, 0xc9, 0x06, 0x0f, 0xbb, 0xb5, 0x5f, 0x06, 0x72, 0x53, 0x28, 0x7e, 0x01,
	0x0d, 0x36, 0xef, 0xf3, 0x98, 0x6c, 0xf2, 0x21, 0x55, 0xd6, 0x4a, 0x11, 0xc3, 0xe0, 0x98, 0xe6,
	0x54, 0x72, 0x0b, 0x7e, 0x09, 0xea, 0xf4, 0x28, 0x08, 0x29, 0xef, 0x70, 0x8b, 0x57, 0xed, 0x57,
	0x26, 0xc8, 0x40, 0x69, 0x9b, 0x45, 0xd0, 0x83, 0x2c, 0x40, 0xf7, 0x77, 0x04, 0x50, 0xcc, 0x83,
	0xd1, 0xc7, 0x86, 0x1f, 0x27, 0xde, 0x59, 0xe8, 0xc4, 0x5c, 0xde, 0x39, 0x7d, 0x25, 0x47, 0x2e,
	0x1c, 0x69, 0xed, 0x1a, 0x7b, 0x21, 0x48, 0x4b, 0xaf, 0x7b, 0xe3, 0xee, 0xf9, 0xaf, 0xdd, 0x0f,
	0x0f, 0xd2, 0xd3, 0x47, 0x04, 0xad, 0x8c, 0xac, 0xf2, 0xc2, 0xa1, 0xbb, 0x17, 0x4e, 0xfa, 0xd7,
	0x85, 0x93, 0x6f, 0x59, 0xb8, 0xe7, 0xa2, 0x67, 0x85, 0xf7, 0xfc, 0xec, 0x2e, 0xf1, 0xfc, 0x3f,
	0x1d, 0xff, 0x04, 0x9b, 0x37, 0x75, 0xf2, 0x9f, 0x2f, 0xc4, 0x9f, 0xd3, 0xd1, 0xf1, 0x5d, 0xde,
	0x82, 0xf6, 0xdc, 0x99, 0x4e, 0xcc, 0xa1, 0xf5, 0xc6, 0x32, 0xf7, 0xb4, 0x1a, 0xee, 0x40, 0xcb,
	0x72, 0x66, 0xa6, 0x7b, 0xf0, 0xca, 0xd6, 0x10, 0xbf, 0x28, 0x4d, 0xf7, 0xc0, 0x74, 0x35, 0x89,
	0x9d, 0x87, 0xb6, 0x65, 0x3a, 0x33, 0x4d, 0x66, 0xa8, 0x89, 0x3b, 0xde, 0x9b, 0x0f, 0x4d, 0x57,
	0x53, 0xd8, 0xb7, 0xe1, 0xd8, 0x99, 0xce, 0x47, 0xa6, 0xab, 0xd5, 0xfb, 0xdb, 0x00, 0xc5, 0x46,
	0xb0, 0xeb, 0x75, 0xee, 0xc7, 0x34, 0xd1, 0x6a, 0xb8, 0x01, 0xd2, 0xf8, 0x54, 0x43, 0xcc, 0x64,
	0x46, 0x51, 0x10, 0x69, 0x52, 0xff, 0x37, 0x05, 0xf0, 0x44, 0xfc, 0x4b, 0xe1, 0x43, 0xdc, 0x8f,
	0x82, 0xf3, 0x10, 0xbf, 0x81, 0xd6, 0x88, 0x26, 0xde, 0xb1, 0x97, 0x78, 0x04, 0xf1, 0x81, 0x6f,
	0x17, 0x03, 0x5f, 0xc7, 0x0f, 0x32, 0x70, 0x3a, 0xf4, 0x3c, 0x36, 0x27, 0x4d, 0x5a, 0x25, 0xad,
	0x22, 0xc7, 0xea, 0x35, 0xf3, 0x52, 0xbc, 0xd5, 0x32, 0x7f, 0xab, 0xef, 0x8e, 0xe5, 0xc7, 0x8a,
	0xc7, 0x5a, 0xb1, 0x83, 0x5c, 0x32, 0x78, 0xfd, 0x5f, 0x91, 0xcb, 0xfd, 0xf8, 0x1b, 0x68, 0xa6,
	0x0f, 0x54, 0x4c, 0xea, 0x1c, 0xfa, 0x45, 0xe5, 0x43, 0xeb, 0x66, 0x28, 0xfc, 0x35, 0xd4, 0x19,
	0x81, 0xb1, 0x78, 0xd8, 0x3f, 0xab, 0x10, 0xa3, 0x9b, 0x22, 0xba, 0xfb, 0xb0, 0x71, 0x63, 0x38,
	0x9f, 0x26, 0x9a, 0xce, 0x43, 0x3c, 0xc5, 0xeb, 0x49, 0xfa, 0xdb, 0xa0, 0xe6, 0xa3, 0xc2, 0x4d,
	0x90, 0xed, 0xf1, 0xbe, 0x56, 0x63, 0xc2, 0x1a, 0x99, 0x33, 0xd7, 0x1a, 0x6a, 0x08, 0xb7, 0x40,
	0x99, 0x4e, 0x5e, 0x39, 0x9a, 0xf4, 0x9a, 0xbc, 0xbf, 0xea, 0xa1, 0x0f, 0x57, 0x3d, 0xf4, 0xd7,
	0x55, 0x0f, 0xfd, 0x7a, 0xdd, 0xab, 0x7d, 0xb8, 0xee, 0xd5, 0xfe, 0xb8, 0xee, 0xd5, 0xfe, 0x09,
	0x00, 0x00, 0xff, 0xff, 0x68, 0xbf, 0x86, 0x70, 0xd8, 0x0a, 0x00, 0x00,
}

func (m *LogEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Level)
	copy(dAtA[i:], m.Level)
	i = encodeVarintPipelineEvent(dAtA, i, uint64(len(m.Level)))
	i--
	dAtA[i] = 0x32
	i = encodeVarintPipelineEvent(dAtA, i, uint64(m.Offset))
	i--
	dAtA[i] = 0x28
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintPipelineEvent(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Contents) > 0 {
		for iNdEx := len(m.Contents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPipelineEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.TimeNs))
	i--
	dAtA[i] = 0x15
	i = encodeVarintPipelineEvent(dAtA, i, uint64(m.Time))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *LogEvent_Content) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogEvent_Content) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogEvent_Content) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintPipelineEvent(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.Key)
	copy(dAtA[i:], m.Key)
	i = encodeVarintPipelineEvent(dAtA, i, uint64(len(m.Key)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MetricEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for k := range m.Tags {
			v := m.Tags[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPipelineEvent(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPipelineEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPipelineEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.MultiValue) > 0 {
		for k := range m.MultiValue {
			v := m.MultiValue[k]
			baseI := i
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(v))))
			i--
			dAtA[i] = 0x11
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPipelineEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPipelineEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SingleValue))))
	i--
	dAtA[i] = 0x29
	i = encodeVarintPipelineEvent(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x20
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintPipelineEvent(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x1a
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.TimeNs))
	i--
	dAtA[i] = 0x15
	i = encodeVarintPipelineEvent(dAtA, i, uint64(m.Time))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SpanEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpanEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpanEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScopeTags) > 0 {
		for k := range m.ScopeTags {
			v := m.ScopeTags[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPipelineEvent(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPipelineEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPipelineEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x7a
		}
	}
	i = encodeVarintPipelineEvent(dAtA, i, uint64(m.Status))
	i--
	dAtA[i] = 0x70
	if len(m.Links) > 0 {
		for iNdEx := len(m.Links) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Links[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPipelineEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPipelineEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Tags) > 0 {
		for k := range m.Tags {
			v := m.Tags[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPipelineEvent(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPipelineEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPipelineEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5a
		}
	}
	i = encodeVarintPipelineEvent(dAtA, i, uint64(m.EndTimeNs))
	i--
	dAtA[i] = 0x50
	i = encodeVarintPipelineEvent(dAtA, i, uint64(m.StartTimeNs))
	i--
	dAtA[i] = 0x48
	i = encodeVarintPipelineEvent(dAtA, i, uint64(m.Kind))
	i--
	dAtA[i] = 0x40
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintPipelineEvent(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.ParentSpanID)
	copy(dAtA[i:], m.ParentSpanID)
	i = encodeVarintPipelineEvent(dAtA, i, uint64(len(m.ParentSpanID)))
	i--
	dAtA[i] = 0x32
	i -= len(m.TraceState)
	copy(dAtA[i:], m.TraceState)
	i = encodeVarintPipelineEvent(dAtA, i, uint64(len(m.TraceState)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.SpanID)
	copy(dAtA[i:], m.SpanID)
	i = encodeVarintPipelineEvent(dAtA, i, uint64(len(m.SpanID)))
	i--
	dAtA[i] = 0x22
	i -= len(m.TraceID)
	copy(dAtA[i:], m.TraceID)
	i = encodeVarintPipelineEvent(dAtA, i, uint64(len(m.TraceID)))
	i--
	dAtA[i] = 0x1a
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.TimeNs))
	i--
	dAtA[i] = 0x15
	i = encodeVarintPipelineEvent(dAtA, i, uint64(m.Time))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SpanEvent_InnerEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpanEvent_InnerEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpanEvent_InnerEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for k := range m.Tags {
			v := m.Tags[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPipelineEvent(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPipelineEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPipelineEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintPipelineEvent(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintPipelineEvent(dAtA, i, uint64(m.TimestampNs))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SpanEvent_SpanLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpanEvent_SpanLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpanEvent_SpanLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for k := range m.Tags {
			v := m.Tags[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPipelineEvent(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPipelineEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPipelineEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	i -= len(m.TraceState)
	copy(dAtA[i:], m.TraceState)
	i = encodeVarintPipelineEvent(dAtA, i, uint64(len(m.TraceState)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.SpanID)
	copy(dAtA[i:], m.SpanID)
	i = encodeVarintPipelineEvent(dAtA, i, uint64(len(m.SpanID)))
	i--
	dAtA[i] = 0x12
	i -= len(m.TraceID)
	copy(dAtA[i:], m.TraceID)
	i = encodeVarintPipelineEvent(dAtA, i, uint64(len(m.TraceID)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PipelineEventGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PipelineEventGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PipelineEventGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Spans) > 0 {
		for iNdEx := len(m.Spans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Spans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPipelineEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Metrics) > 0 {
		for iNdEx := len(m.Metrics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metrics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPipelineEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Logs) > 0 {
		for iNdEx := len(m.Logs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Logs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPipelineEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	i = encodeVarintPipelineEvent(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x18
	if len(m.Tags) > 0 {
		for k := range m.Tags {
			v := m.Tags[k]
			baseI := i
			if v != nil {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintPipelineEvent(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPipelineEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPipelineEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			if v != nil {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintPipelineEvent(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPipelineEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPipelineEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPipelineEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovPipelineEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LogEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPipelineEvent(uint64(m.Time))
	n += 5
	if len(m.Contents) > 0 {
		for _, e := range m.Contents {
			l = e.Size()
			n += 1 + l + sovPipelineEvent(uint64(l))
		}
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovPipelineEvent(uint64(l))
		}
	}
	n += 1 + sovPipelineEvent(uint64(m.Offset))
	l = len(m.Level)
	n += 1 + l + sovPipelineEvent(uint64(l))
	return n
}

func (m *LogEvent_Content) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovPipelineEvent(uint64(l))
	if m.Value != nil {
		l = len(m.Value)
		n += 1 + l + sovPipelineEvent(uint64(l))
	}
	return n
}

func (m *MetricEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPipelineEvent(uint64(m.Time))
	n += 5
	l = len(m.Name)
	n += 1 + l + sovPipelineEvent(uint64(l))
	n += 1 + sovPipelineEvent(uint64(m.Type))
	n += 9
	if len(m.MultiValue) > 0 {
		for k, v := range m.MultiValue {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPipelineEvent(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovPipelineEvent(uint64(mapEntrySize))
		}
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPipelineEvent(uint64(len(k))) + 1 + len(v) + sovPipelineEvent(uint64(len(v)))
			n += mapEntrySize + 1 + sovPipelineEvent(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SpanEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPipelineEvent(uint64(m.Time))
	n += 5
	l = len(m.TraceID)
	n += 1 + l + sovPipelineEvent(uint64(l))
	l = len(m.SpanID)
	n += 1 + l + sovPipelineEvent(uint64(l))
	l = len(m.TraceState)
	n += 1 + l + sovPipelineEvent(uint64(l))
	l = len(m.ParentSpanID)
	n += 1 + l + sovPipelineEvent(uint64(l))
	l = len(m.Name)
	n += 1 + l + sovPipelineEvent(uint64(l))
	n += 1 + sovPipelineEvent(uint64(m.Kind))
	n += 1 + sovPipelineEvent(uint64(m.StartTimeNs))
	n += 1 + sovPipelineEvent(uint64(m.EndTimeNs))
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPipelineEvent(uint64(len(k))) + 1 + len(v) + sovPipelineEvent(uint64(len(v)))
			n += mapEntrySize + 1 + sovPipelineEvent(uint64(mapEntrySize))
		}
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovPipelineEvent(uint64(l))
		}
	}
	if len(m.Links) > 0 {
		for _, e := range m.Links {
			l = e.Size()
			n += 1 + l + sovPipelineEvent(uint64(l))
		}
	}
	n += 1 + sovPipelineEvent(uint64(m.Status))
	if len(m.ScopeTags) > 0 {
		for k, v := range m.ScopeTags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPipelineEvent(uint64(len(k))) + 1 + len(v) + sovPipelineEvent(uint64(len(v)))
			n += mapEntrySize + 1 + sovPipelineEvent(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SpanEvent_InnerEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPipelineEvent(uint64(m.TimestampNs))
	l = len(m.Name)
	n += 1 + l + sovPipelineEvent(uint64(l))
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPipelineEvent(uint64(len(k))) + 1 + len(v) + sovPipelineEvent(uint64(len(v)))
			n += mapEntrySize + 1 + sovPipelineEvent(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SpanEvent_SpanLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TraceID)
	n += 1 + l + sovPipelineEvent(uint64(l))
	l = len(m.SpanID)
	n += 1 + l + sovPipelineEvent(uint64(l))
	l = len(m.TraceState)
	n += 1 + l + sovPipelineEvent(uint64(l))
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPipelineEvent(uint64(len(k))) + 1 + len(v) + sovPipelineEvent(uint64(len(v)))
			n += mapEntrySize + 1 + sovPipelineEvent(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PipelineEventGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = 1 + len(v) + sovPipelineEvent(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovPipelineEvent(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPipelineEvent(uint64(mapEntrySize))
		}
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = 1 + len(v) + sovPipelineEvent(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovPipelineEvent(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPipelineEvent(uint64(mapEntrySize))
		}
	}
	n += 1 + sovPipelineEvent(uint64(m.Type))
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovPipelineEvent(uint64(l))
		}
	}
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovPipelineEvent(uint64(l))
		}
	}
	if len(m.Spans) > 0 {
		for _, e := range m.Spans {
			l = e.Size()
			n += 1 + l + sovPipelineEvent(uint64(l))
		}
	}
	return n
}

func sovPipelineEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPipelineEvent(x uint64) (n int) {
	return sovPipelineEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LogEvent) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelineEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeNs", wireType)
			}
			m.TimeNs = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeNs = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contents = append(m.Contents, &LogEvent_Content{})
			if err := m.Contents[len(m.Contents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipelineEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Time")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogEvent_Content) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelineEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Content: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Content: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipPipelineEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Key")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Value")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricEvent) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelineEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeNs", wireType)
			}
			m.TimeNs = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeNs = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MetricEvent_MetricValueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SingleValue = float64(math.Float64frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MultiValue == nil {
				m.MultiValue = make(map[string]float64)
			}
			var mapkey string
			var mapvalue float64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPipelineEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPipelineEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					mapvalue = math.Float64frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPipelineEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MultiValue[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPipelineEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPipelineEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPipelineEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPipelineEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipelineEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Time")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpanEvent) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelineEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpanEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpanEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeNs", wireType)
			}
			m.TimeNs = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeNs = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpanID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentSpanID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentSpanID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= SpanEvent_SpanKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeNs", wireType)
			}
			m.StartTimeNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimeNs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimeNs", wireType)
			}
			m.EndTimeNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTimeNs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPipelineEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPipelineEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPipelineEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPipelineEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &SpanEvent_InnerEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Links", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Links = append(m.Links, &SpanEvent_SpanLink{})
			if err := m.Links[len(m.Links)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SpanEvent_StatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScopeTags == nil {
				m.ScopeTags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPipelineEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPipelineEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPipelineEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPipelineEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ScopeTags[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipelineEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Time")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TraceID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SpanID")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("StartTimeNs")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("EndTimeNs")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpanEvent_InnerEvent) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelineEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InnerEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InnerEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampNs", wireType)
			}
			m.TimestampNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampNs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPipelineEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPipelineEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPipelineEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPipelineEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipelineEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TimestampNs")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpanEvent_SpanLink) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelineEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpanLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpanLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpanID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPipelineEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPipelineEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPipelineEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPipelineEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipelineEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TraceID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("SpanID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PipelineEventGroup) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelineEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PipelineEventGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PipelineEventGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPipelineEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPipelineEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPipelineEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPipelineEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPipelineEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPipelineEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPipelineEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPipelineEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPipelineEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PipelineEventGroup_EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &LogEvent{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, &MetricEvent{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spans = append(m.Spans, &SpanEvent{})
			if err := m.Spans[len(m.Spans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipelineEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipelineEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPipelineEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPipelineEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPipelineEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPipelineEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPipelineEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPipelineEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPipelineEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPipelineEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPipelineEvent = fmt.Errorf("proto: unexpected end of group")
)
